# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  print_pipeline_id:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}
jobs:

  say-hello:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
          
  say-name:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Say name"
          command: |
            echo $MY_ENV_VAR

  save_hello_world_output:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - run: echo "hello world" > ~/output.txt
        - persist_to_workspace:
            root: ~/
            paths:
              - output.txt

  print_output_file:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - attach_workspace:
            at: ~/
        - run: cat ~/output.txt



  my_job:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id
      
  faild_job:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: exit 1
      - run:
          name: on error
          command: echo "Hello Error!"
          when: on_fail      
      


  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm i
      - save_cache:
          key: "npm-packeges"
          paths:
            - /src/node_modules
      - run: npm run lint
  test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "npm-packeges"
      - run: npm i
      - run: npm run test
  analyze:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "npm-packeges"
      - run: npm audit fix
      - run: npm audit

workflows:
  my_workflow:
    jobs:
      - build
      - test:
          requires:
            - build
      - analyze:
          requires:
            - test
            
     #- faild_job
     #- my_job
     #- save_hello_world_output
     #- print_output_file:
      #    requires:
       #     - save_hello_world_output
            
     # - say-hello
     # - say-name:
      #    requires:
       #     - say-hello
            
 # env-vars:
  #  jobs:
   #   - say-name
